version: "3.9"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: fraudguard-zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: fraudguard-kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: fraudguard-zookeeper:2181
      # Inside the docker network, other services should reach "fraudguard-kafka:9092"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://fraudguard-kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    healthcheck:
      # Broker is ready if we can list topics
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 12

  producer:
    build: ./simulation
    container_name: fraudguard-producer
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./data:/opt/data
    entrypoint: >
      /bin/bash -c "python /opt/app/producer.py"

  predictions:
    build: ./Streaming
    container_name: fraudguard-predictions
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./Streaming:/opt/app
      - ./fraud_model.pkl:/opt/app/fraud_model.pkl
      - ./Streaming/log4j2.properties:/opt/spark/conf/log4j2.properties
    environment:
      - SPARK_SUBMIT_OPTS=-Dlog4j.configurationFile=file:/opt/spark/conf/log4j2.properties
    entrypoint: >
      /bin/bash -c "spark-submit /opt/app/stream_app.py"

  ws:
    image: python:3.11-slim
    container_name: fraudguard-ws
    restart: unless-stopped
    working_dir: /opt/app/Backend
    volumes:
      - ./:/opt/app
      - ./fraud_model.pkl:/opt/app/Backend/fraud_model.pkl
    command: >
      sh -c "pip install --no-cache-dir fastapi 'uvicorn[standard]' &&
             uvicorn fraud_ws_server:app --host 0.0.0.0 --port 8000"
    ports:
      - "8000:8000"
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request,sys; urllib.request.urlopen('http://localhost:8000/health', timeout=2) and sys.exit(0)"]
      interval: 10s
      timeout: 3s
      retries: 10

  consumer:
    image: python:3.11-slim
    container_name: fraudguard-consumer
    restart: unless-stopped
    working_dir: /opt/app/Backend
    volumes:
      - ./:/opt/app
      - ./fraud_model.pkl:/opt/app/Backend/fraud_model.pkl
    environment:
      KAFKA_BOOTSTRAP: fraudguard-kafka:9092
      KAFKA_GROUP_ID: fraudguard-python-ws
      MODEL_PATH: /opt/app/Backend/fraud_model.pkl
      WS_URL: http://ws:8000/broadcast
      KAFKA_CONNECT_TRIES: "40"
      KAFKA_CONNECT_DELAY: "3"
    command: >
      sh -c "pip install --no-cache-dir kafka-python joblib requests pandas scikit-learn==1.7.2 &&
             python kafka_fraud_consumer.py"
    depends_on:
      kafka:
        condition: service_healthy
      ws:
        condition: service_healthy
